"use strict"

const name = [
  "Machining Coolant",
  "Mold Core",
  "Boron Carbide",
  "Cutting Oil",
  "Endmill Tool",
  "Vitrified Bond Abrasive",
  "Resin Bond Abrasive",
  "Synthetic Diamond Abrasive",
  "CBN Endmill",
  "Micro Endmill",
  "Boron Carbide",
  "CBN Brazed Tool",
  "Vitrified Bond CBN",
  "Stamping Oil",
  "Finishing Endmill",
  "Diamond Paste",
  "Micro Endmill",
  "Indexable Endmill",
  "Slideway Oil",
  "Mold Insert",
  "Biodegradable Degreaser",
  "Oil Remover",
  "Endmill for Stainless Steel",
  "Glass Bead Abrasives",
  "Machining Coolant",
  "Vitrified Bond Abrasive",
  "Finishing Endmill",
  "Spindle Oil",
  "Wire Drawing Lubricant",
  "Blow Mold",
  "Silicon Carbide",
  "Mold Base",
  "Vitrified Bond Abrasive",
  "Roughing Endmill",
  "Polycrystalline Diamond (PCD)",
  "CBN Tool",
  "CBN Abrasive",
  "Electroplated Diamond",
  "Nano CBN",
  "Roughing Endmill",
  "Vacuum Forming Mold",
  "Diamond Lapping Film",
  "Cubic Boron Nitride",
  "Aluminum Endmill",
  "Thread Cutting Oil",
  "Synthetic Diamond Abrasive",
  "CBN Inserts",
  "Diamond Burr",
  "Walnut Shell",
  "Diamond Paste",
  "Ceramic Grain Abrasive",
  "Finishing Endmill",
  "Thread Mill",
  "Diamond Polishing Pad",
  "CBN Polishing Tool",
  "Rust Remover",
  "Silicon Carbide",
  "Variable Helix Endmill",
  "Die Mold",
  "Alumina Grit",
  "Polishing Media",
  "Wire Drawing Lubricant",
  "Compressor Oil",
  "Mold Insert",
  "Micro Endmill",
  "Vacuum Forming Mold",
  "Thread Cutting Oil",
  "Cleaning Solvent",
  "Polycrystalline Diamond (PCD)",
  "Precision Mold",
  "Die Cast Mold",
  "Coated Abrasive Sheets",
  "Foam Cleaner",
  "pH Neutral Cleaner",
  "Alkaline Cleaning Agent",
  "Metal Cleaner",
  "Electroplated CBN",
  "Monocrystalline Diamond",
  "Garnet Powder",
  "Diamond Polishing Pad",
  "Plastic Abrasive",
  "Cleaning Solvent",
  "Micro Endmill",
  "Oil Remover",
  "Diamond Dressing Tool",
  "CBN Grinding Wheel",
  "Nano Diamond",
  "Stamping Oil",
  "Foam Cleaner",
  "Solid Carbide Endmill",
  "Polycrystalline Diamond (PCD)",
  "Diamond Grit",
  "Grinding Oil",
  "Polycrystalline Diamond (PCD)",
  "Diamond Cutting Disc",
  "Rust Remover",
  "Resin Bond Abrasive",
]

const uom = [
  "PCS",
  "PART",
  "BOX",
  "PKG",
  "SET",
  "KIT",
  "PAIR",
  "BAG",
  "ROLL",
  "FT",
  "IN",
  "YARD",
  "SQFT",
  "SQIN",
  "LTR",
  "ML",
  "GAL",
  "KG",
  "G",
  "LB",
  "OZ",
  "TON",
  "DOZEN",
  "TUBE",
  "CAN",
  "BOTTLE",
  "DRUM",
  "PALLET",
  "REEL",
  "SHEET",
]

// Array of 50 harga dalam bentuk string

const stock = [
  100, 200, 300, 400, 500, 600, 700, 800, 900, 20, 30, 40, 50, 60, 70, 80, 10,
  55, 64, 35, 66, 80,
]

const PRICE_DATA = {
  IDR: [
    "125000",
    "350000",
    "780000",
    "540000",
    "920000",
    "230000",
    "670000",
    "450000",
    "890000",
    "310000",
    "560000",
    "180000",
    "740000",
    "290000",
    "620000",
    "390000",
    "850000",
    "470000",
    "710000",
    "260000",
    "830000",
    "410000",
    "690000",
    "150000",
    "580000",
    "320000",
    "760000",
    "490000",
    "940000",
    "210000",
    "630000",
    "370000",
    "820000",
    "520000",
    "980000",
    "270000",
    "700000",
    "430000",
    "860000",
    "190000",
    "610000",
    "340000",
    "790000",
    "460000",
    "910000",
    "240000",
    "650000",
    "380000",
    "840000",
    "170000",
  ],
  USD: [
    "8.25",
    "23.10",
    "51.48",
    "35.64",
    "60.72",
    "15.18",
    "44.22",
    "29.70",
    "58.74",
    "20.46",
    "36.96",
    "11.88",
    "48.84",
    "19.14",
    "40.92",
    "25.74",
    "56.10",
    "31.02",
    "46.86",
    "17.16",
    "54.78",
    "27.06",
    "45.54",
    "9.90",
    "38.28",
    "19.84",
    "50.16",
    "32.34",
    "62.04",
    "13.86",
    "41.58",
    "24.42",
    "54.12",
    "34.32",
    "64.68",
    "17.82",
    "46.20",
    "28.38",
    "56.76",
    "12.54",
    "40.26",
    "20.40",
    "51.72",
    "31.36",
    "60.06",
    "15.84",
    "42.90",
    "28.88",
    "55.44",
    "11.22",
    "11.22",
    "11.22",
    "11.22",
    "11.22",
    "11.22",
  ],
  CNY: [
    "58.75",
    "164.50",
    "366.60",
    "253.80",
    "432.40",
    "108.10",
    "314.90",
    "211.50",
    "418.30",
    "145.70",
    "263.20",
    "84.60",
    "347.80",
    "136.30",
    "291.40",
    "181.30",
    "387.60",
    "220.90",
    "334.70",
    "122.20",
    "390.10",
    "192.70",
    "324.30",
    "70.50",
    "272.60",
    "155.20",
    "357.20",
    "230.30",
    "442.20",
    "98.70",
    "297.10",
    "174.90",
    "394.60",
    "250.40",
    "460.60",
    "123.90",
    "322.00",
    "208.10",
    "404.20",
    "89.30",
    "286.70",
    "164.20",
    "370.30",
    "215.60",
    "430.70",
    "113.40",
    "309.50",
    "188.60",
    "399.60",
    "80.70",
    "80.70",
    "80.70",
    "80.70",
  ],
  EUR: [
    "7.63",
    "21.35",
    "47.58",
    "32.94",
    "56.12",
    "14.03",
    "40.87",
    "27.45",
    "54.29",
    "18.91",
    "34.16",
    "10.98",
    "45.14",
    "17.69",
    "37.82",
    "23.79",
    "51.85",
    "28.67",
    "43.31",
    "15.86",
    "50.63",
    "25.01",
    "42.09",
    "9.15",
    "35.38",
    "19.52",
    "46.36",
    "29.89",
    "57.34",
    "12.81",
    "38.43",
    "22.57",
    "50.02",
    "31.72",
    "59.78",
    "16.47",
    "42.70",
    "27.23",
    "52.46",
    "11.59",
    "37.21",
    "21.34",
    "48.19",
    "28.06",
    "55.51",
    "14.64",
    "39.95",
    "24.32",
    "51.24",
    "10.37",
    "10.37",
    "10.37",
  ],
  JPY: [
    "1187.50",
    "3325.00",
    "7410.00",
    "5130.00",
    "8740.00",
    "2185.00",
    "6365.00",
    "4275.00",
    "8455.00",
    "2945.00",
    "5320.00",
    "1710.00",
    "7030.00",
    "2755.00",
    "5890.00",
    "3705.00",
    "8075.00",
    "4465.00",
    "6745.00",
    "2470.00",
    "7885.00",
    "3895.00",
    "6555.00",
    "1425.00",
    "5510.00",
    "3040.00",
    "7220.00",
    "4655.00",
    "8930.00",
    "1995.00",
    "5985.00",
    "3515.00",
    "7790.00",
    "4940.00",
    "9310.00",
    "2565.00",
    "6650.00",
    "4085.00",
    "8170.00",
    "1805.00",
    "5795.00",
    "3230.00",
    "7505.00",
    "4370.00",
    "8650.00",
    "2280.00",
    "6175.00",
    "3610.00",
    "7980.00",
    "1615.00",
    "1615.00",
    "1615.00",
  ],
}

const SUPPLER_DATA = [
  { id: 1, currency: "JPY" },
  { id: 2, currency: "USD|CNY" },
  { id: 3, currency: "USD" },
  { id: 4, currency: "EUR" },
]

const SEED_DATA_PRODUCT = []

const GET_RANDOM_CURRENCY = (currency) => {
  if (!currency.includes("|")) {
    return currency
  }
  const currencies = currency.split("|")
  const randomCurrency =
    currencies[Math.floor(Math.random() * currencies.length)]
  return randomCurrency
}

SUPPLER_DATA.forEach((supplier) => {
  const iterations = Array.from({ length: 100 })
  iterations.forEach(() => {
    const PRODUCT_NAME = name[Math.floor(Math.random() * name.length)]
    SEED_DATA_PRODUCT.push({
      name: PRODUCT_NAME,
      alias: "",
      currency: "",
      stock: stock[Math.floor(Math.random() * stock.length)],
      uom: uom[Math.floor(Math.random() * uom.length)],
      product_group_id: 0,
      product_group_name: PRODUCT_NAME.split(" ")[0],
      product_brand_id: 0,
      product_brand_name: "",
      product_type_id: 0,
      product_type_name: "",
      product_variant_id: 0,
      product_variant_name:
        PRODUCT_NAME.split(" ")[PRODUCT_NAME.split(" ").length - 1],
      price:
        PRICE_DATA[GET_RANDOM_CURRENCY(supplier.currency)][
          Math.floor(Math.random() * 50) + 1
        ],
      currency: GET_RANDOM_CURRENCY(supplier.currency),
      supplier_id: supplier.id,
      createdAt: new Date(),
      updatedAt: new Date(),
    })
  })
})

/** @type {import('sequelize-cli').Migration} */
module.exports = {
  async up(queryInterface, Sequelize) {
    /**
     * Add seed commands here.
     *
     * Example:
     * await queryInterface.bulkInsert('People', [{
     *   name: 'John Doe',
     *   isBetaMember: false
     * }], {});
     */
    await queryInterface.bulkInsert("data_products", SEED_DATA_PRODUCT)
  },

  async down(queryInterface, Sequelize) {
    /**
     * Add commands to revert seed here.
     *
     * Example:
     * await queryInterface.bulkDelete('People', null, {});
     */
    await queryInterface.bulkDelete("data_products", null, {})
  },
}
